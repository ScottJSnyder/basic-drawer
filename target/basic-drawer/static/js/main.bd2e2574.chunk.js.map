{"version":3,"sources":["history.js","NavigationList.js","Home.js","About.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","navigation","id","text","icon","filePath","NavigationList","loadView","e","history","push","addedItems","props","stateHandler","isDrawerOpen","Fragment","items","width","selectionMode","onSelectionChanged","this","React","PureComponent","Home","Component","About","App","renderList","newState","setState","state","buttonOptions","onClick","widget","options","location","minSize","height","revealMode","openedStateMode","render","opened","exact","path","component","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAEeA,gBCETC,EAAa,CACf,CAAEC,GAAI,EAAGC,KAAM,OAAQC,KAAM,UAAWC,SAAU,QAClD,CAAEH,GAAI,EAAGC,KAAM,QAASC,KAAM,QAASC,SAAU,UAoBtCC,E,4MAhBXC,SAAW,SAACC,GACRC,EAAQC,KAAKF,EAAEG,WAAW,GAAGN,UAC7B,EAAKO,MAAMC,aAAa,CAAEC,cAAc,K,uDAGxC,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CACIC,MAAOf,EACPgB,MAAO,IACPC,cAAc,SACdC,mBAAoBC,KAAKb,gB,GAZhBc,IAAMC,e,SCCpBC,E,uKANP,OAAQ,kBAAC,IAAMR,SAAP,KACJ,yC,GAHOM,IAAMG,WCQVC,E,uKANP,OAAQ,kBAAC,IAAMV,SAAP,KACJ,0C,GAHQM,IAAMG,WCmEXE,E,kDAlDb,WAAYd,GAAQ,IAAD,8BACf,cAAMA,IAaVe,WAAa,WAET,OACI,kBAAC,EAAD,CAAgBd,aAFC,SAACe,GAAD,OAAc,EAAKC,SAASD,OAZjD,EAAKE,MAAQ,CACThB,cAAc,GAElB,EAAKiB,cAAgB,CACjB3B,KAAM,OACN4B,QAAS,WACL,EAAKH,SAAS,CAAEf,cAAe,EAAKgB,MAAMhB,iBATnC,E,qDAsBf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,UAAD,CAASb,GAAG,WACR,kBAAC,OAAD,CACI+B,OAAO,WACPC,QAASd,KAAKW,cACdI,SAAS,YAEjB,kBAAC,SAAD,CACIC,QAAS,GACTC,OAAQ,IACRC,WAAW,SACXC,gBAAgB,UAChBC,OAAQpB,KAAKO,WACbc,OAAQrB,KAAKU,MAAMhB,cACnB,yBAAKZ,GAAG,QACJ,kBAAC,IAAD,CAAQO,QAASA,GACb,6BACI,kBAAC,IAAD,CAAOiC,OAAK,EAACC,KAAK,QAAQC,UAAWrB,IACrC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,SAASC,UAAWnB,a,GA1ClDJ,IAAMG,WCNJqB,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAAST,OACP,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bd2e2574.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\"\r\n \r\nexport default createBrowserHistory()","import React from \"react\";\r\nimport List from \"devextreme-react/list\";\r\nimport history from \"./history\";\r\n \r\nconst navigation = [\r\n    { id: 1, text: \"Home\", icon: \"message\", filePath: \"home\" },\r\n    { id: 2, text: \"About\", icon: \"check\", filePath: \"about\" }\r\n];\r\n \r\nclass NavigationList extends React.PureComponent {\r\n    loadView = (e) => {\r\n        history.push(e.addedItems[0].filePath);\r\n        this.props.stateHandler({ isDrawerOpen: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <List\r\n                    items={navigation}\r\n                    width={200} \r\n                    selectionMode=\"single\"\r\n                    onSelectionChanged={this.loadView} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default NavigationList;","import React from \"react\";\r\n\r\nclass Home extends React.Component {\r\nrender(){\r\n        return (<React.Fragment>\r\n            <h1>HOME</h1>\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\n\r\nclass About extends React.Component {\r\nrender(){\r\n        return (<React.Fragment>\r\n            <h1>ABOUT</h1>\r\n        </React.Fragment>);\r\n    }\r\n}\r\n\r\nexport default About;","import React from \"react\";\n \nimport \"devextreme/dist/css/dx.common.css\";\nimport \"devextreme/dist/css/dx.light.css\";\nimport \"./DxComponent.css\";\n \nimport { Drawer } from \"devextreme-react/drawer\";\nimport { Toolbar, Item } from \"devextreme-react/toolbar\";\nimport NavigationList from \"./NavigationList\";\n \nimport { Router, Route } from \"react-router-dom\";\n \nimport Home from \"./Home\";\nimport About from \"./About\";\n\n \nimport history from \"./history\";\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n\n      this.state = {\n          isDrawerOpen: false\n      };\n      this.buttonOptions = {\n          icon: \"menu\",\n          onClick: () => {\n              this.setState({ isDrawerOpen: !this.state.isDrawerOpen });\n          }\n      };\n  }\n\n  renderList = () => {\n      const stateHandler = (newState) => this.setState(newState);\n      return (\n          <NavigationList stateHandler={stateHandler} />\n      );\n  }\n\n  render() {\n      return (\n          <React.Fragment>\n              <Toolbar id=\"toolbar\">\n                  <Item \n                      widget=\"dxButton\" \n                      options={this.buttonOptions} \n                      location=\"before\" />\n              </Toolbar>\n              <Drawer\n                  minSize={37}\n                  height={250}\n                  revealMode=\"expand\"\n                  openedStateMode=\"overlap\"\n                  render={this.renderList}\n                  opened={this.state.isDrawerOpen} >\n                  <div id=\"view\">\n                      <Router history={history}>\n                          <div>\n                              <Route exact path=\"/home\" component={Home} />\n                              <Route exact path=\"/about\" component={About}/>\n                          </div>\n                      </Router>\n                  </div>\n              </Drawer>\n          </React.Fragment>\n      );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}